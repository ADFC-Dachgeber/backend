name: Build and Deploy to GKE

on:
  push:
    branches:
      - feature/cd

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: autopilot-cluster-4
  GKE_ZONE: europe-west3
  DEPLOYMENT_NAME: backend-deployment
  REPOSITORY: backend
  IMAGE: backend

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker "$GKE_ZONE-docker.pkg.dev"

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "$GKE_ZONE-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -Lo kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.4.1/kustomize_v4.4.1_linux_amd64.tar.gz
          tar -xvzf kustomize.tar.gz
          chmod u+x ./kustomize

      - name: Inject image name to configMap
        run: |-
          echo >> k8s/overlays/production/configMap.yml
          echo "  image: gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" >> k8s/overlays/production/configMap.yml
          
      - name: Inject production JWT secret to configMap
        run: |-
          echo "  jwtSecret: ${{secrets.JWT_SECRET}}" >> k8s/overlays/production/configMap.yml

      - name: Inject production database connection string to configMap
        run: |-
          echo >> k8s/overlays/production/configMap.yml
          echo "  databaseUrl: postgresql://postgres:${{secrets.POSTGRES_PASSWORD}}@postgres-postgresql:5432/dg" >> k8s/overlays/production/configMap.yml

      #Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          ./kustomize build k8s/overlays/production | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
